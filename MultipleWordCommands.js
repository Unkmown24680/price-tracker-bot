function perform(command, text, data) {
    //sendReport(`Will be performing ${command} with argument <code>${text}</code>`)
    var isOwnerCallback = false
    var chatid = data.message.chat.id
    try {
        if (data.from.id == ownerid) {
            var isOwnerCallback = true
        }
    } catch (e) { }
    var link = ''
    if (text.split('http').length > 1) {
        var link = 'http' + text.split('http')[1].split(' ')[0]
    } else if (text.split('.com/').length > 1) {
        var link = text.split('.com/')[1].split(' ')[0]
    }
    try {
        if (link.lastIndexOf('amazon.in') != -1) {
            var client = 'Amazon'
            var api = fetchAmazonAPI
        } else if (link.lastIndexOf('flipkart.com') != -1) {
            var client = 'Flipkart'
            var api = fetchAPI
        } else {
            var client = 'Flipkart'
            var api = fetchAPI
        }
    }
    catch (e) { }
    //  link = link.replace('https://', '').replace('http://', '').replace('s://', '').replace('://', '').replace('dl.flipkart.com/dl/', '').replace('dl.flipkart.com/', '').replace('www.flipkart.com/', '').replace('flipkart.com/', '')
    switch (command) {
        case 'inform':
            if ((data.message.from.id == ownerid || isOwnerCallback) && text.split(' ').length > 1) {
                sendMessage('Bot owner operation, information service!', data)
                updateNotice(false, 'inform service', text)
            }
            break;
        case 'tr':
            try {
                if (client == 'Flipkart') {
                    var keyboardButtons = [
                        { "text": "✅ Yes (BETA)", "callback_data": `askPincode_message` },
                        { "text": "❌ No", "callback_data": `track_message` },
                        { "text": 'ℹ️ View product in Flipkart', "url": text }
                    ]
                    sendButtonMessage(`ℹ️ Would you like to track your product's price and stock specific to your pincode?`, data, null, keyboardButtons)
                } else {
                    perform('track', text, data)
                }
            } catch (ex) {
                sendReport(`Error in 'tr' command : ${ex.message}`)
                sendMessage('Some unexpected error occured! Issue reported to developer.', data)
            }
            break;
        case 'askPincode':
            forceReply(pincodeTrackMessage + `\n\n➡️ Product URL : ${text}`, data, null, 'Your pincode')
            break;
        case 'pincode':
            var spaceSplit = text.split(' ')
            var pincode = spaceSplit[0]
            if (pincode.length != 6) { pincode = 110051 }
            try {
                var json = pincodeAPI(link, pincode)
                if (json.error == undefined) {
                    //sendReport(JSON.stringify(json, null, 3))
                    var name = json.name, price = inr(json.current_price), oPrice = inr(json.original_price), stockDetails = json.stock_details, genStock = stockDetails.general_stock, pinStock = stockDetails.pincode_stock, fassured = json.fassured, link = json.share_url, discount = json.discount, pincode = stockDetails.pincode
                    sendMessage(`<b>${name}</b>\n\n<b>💵 Current Price :</b> Rs. ${price}\n<b>💸 Original Price :</b> Rs. ${oPrice},\n<b>🔥 Discount :</b> ${discount}\n<b>👌 F-Assured :</b> ${fassured}\n<b>🚨 In-Stock (General) :</b> ${genStock}\n<b>🤩 In-Stock (${pincode}) :</b> ${pinStock}\n\n<a href="${link}">🔗 Link to product</a>\n\n~ Generated by ${botName}`, data)
                    if (chatid != ownerid) {
                        sendReport(`Successfully got the Pincode API worked out for product link\n<code>${link}</code>`)
                    }
                } else { throw `API failed due to 'except' block in source-code` }
            } catch (error) {
                sendMessage(`Sorry! Failed to get product details for your pincode. The error has been reported to developer to improve this feature over time.\n\nThe developer may contact you soon to resolve your problem.\n\nNOTE : This feature will not be avaliable from 02:00 AM to 10:10 AM IST due to server limitations. To help me out with my project, consider buying me a coffee. (/donate)`, data)
                if (chatid != ownerid) {
                    sendReport(`Pincode feature error\n\nUser ID : <a href="tg://user?id=${data.message.chat.id}">${data.message.chat.id}</a> <code>(${data.message.chat.id})</code>`)
                    sendReport(Error(error).message)
                }
            }
            break;
        case 'get':
            if (link.lastIndexOf('amazon.in') != -1) {
                var client = 'Amazon'
                var api = fetchAmazonAPI
            } else if (link.lastIndexOf('flipkart.com') != -1) {
                var client = 'Flipkart'
                var api = fetchAPI
            } else {
                var client = 'Flipkart'
                var api = fetchAPI
            }
            try {
                var json = api(link), name = json.name, price = inr(json.current_price), oPrice = inr(json.original_price)
                try {
                    var thumbnail = json.thumbnails[0]
                    var t = thumbnail.split('image/')[1].split('/')[0]
                    thumbnail = thumbnail.replace(t, '1024').replace(t, '1024')
                    sendPhoto(thumbnail, `<b>${name}</b>`, data)
                } catch (e) { }
                var discount = json.discount_percent, discountAmount = json.original_price - json.current_price, stock = json.in_stock
                var rating = json.rating, fassured = json.f_assured, url = json.share_url, h = json.highlights
                var i, f, highlights = '';
                if (stock != undefined && url != undefined) {
                    if (h != null && h != undefined && h != []) {
                        for (i = 0; i < h.length; i++) { var highlights = highlights + '\n' + (i + 1) + '. ' + h[i] }
                    } else { var highlights = 'No highlights avaliable' }
                    var rateText = '';
                    if (rating == null) { rating = 'Unrated' } else { for (var ok = 0; ok < parseInt(rating); ok++) { rateText += star } }
                    if (fassured) { f = 'Yes ✅' } else { f = 'No ❌' }
                    if (stock) { stock = 'Yes ✅' } else { stock = 'No ❌' }
                    var keyboardButtons = [
                        { "text": "👍 Track Product", "callback_data": `tr_message` },
                        { "text": `${client == 'Flipkart' ? "➡️ View Specifications" : "🔎 Show similar products"}`, "callback_data": `${client == 'Flipkart' ? "spec_message" : `/s ${crop(name.split('(')[0].trim())}`}` },
                        { "text": `ℹ️ Open in ${client}`, "url": url }
                    ]
                    if (client == 'Flipkart') {
                        keyboardButtons.push(
                            { "text": `🔎 Show similar products`, "callback_data": `/s ${crop(name.split('(')[0].trim())}` })
                    }
                    sendButtonMessage(
                        '\n\n<b>' + name + '</b>\n\n' + '💵 Current Price : Rs. ' + price +
                        '\n💸 Original Price : Rs. ' + oPrice + '\n🚨 In Stock : ' + String(stock) + '\n🔥 Discount : Rs. ' +
                        discountAmount + ' ( ' + discount + '% )\n🤩 Rating : ' +
                        rating + ' ' + rateText + `\n👌 ${(client != 'Flipkart' ? 'Marketplace : ' + client : 'F-Assured : ' + f)}` +
                        '\n\n✏️ Highlights : ' + highlights + '\n\nGenerated by ' + botName
                        //'\n\n<a href="' + url +'">🔗 Link to product</a>' + '\n\nℹ️ For Product Specifications, send :\n<code>/spec ' + url + '</code>\n\nℹ️ To set price/stock alerts, send :\n<code>/track ' + url + '</code>'
                        , data, null, keyboardButtons)
                } else {
                    sendMessage('🙇‍♂️ Error occured!\nThe product you searched for is not adapted to our program.\nI am only be able to track product currently avaliable in Flipkart.\n\nReport has been sent and will be fixed as soon as possible!', data)
                    throw 'Product fetch failed, stock status is ' + stock + ' & url is ' + link
                }
            } catch (e) {
                sendMessage('🙇‍♂️ Sorry! I failed to follow your command!\n\nReport has been sent and will be fixed as soon as possible!', data)
                sendReport('Error occured from user <code>' + data.message.from.first_name + '</code> (<code>' + data.message.chat.id + '</code>)')
                sendReport(Error(e).message)
            }
            break;
        case 'pincodeTrack':
            try {
                var pincodeLink = 'http' + text.split('http')[1].split(' ')[0]
                var userPincode = parseInt(text.split(pincodeLink)[1])
                if (String(userPincode).length != 6) {
                    throw `User pincode is not of appropriate length (${userPincode})`
                } else {
                    var json = pincodeAPI(pincodeLink, userPincode)
                    if (json.error == 'API timing') {
                        var keyboardButtons = [
                            { "text": "🔄 Normal Tracking", "callback_data": `track_message` },
                            { "text": "🧑🏻‍💻 Report issue", "callback_data": `/r` },
                            { "text": "ℹ️ Open in Flipkart", "url": pincodeLink },
                            { "text": "👌 Donate", "callback_data": "/donate" }
                        ]
                        sendButtonMessage('Being a premium feature, pincode tracking can only be accessed between <code>10:10 AM</code> to <code>02:00 AM</code>. Try adding product at these hours or use normal tracking for your product right now.\n\nTo help me expand the feature, consider buying me a coffee.', data, null, keyboardButtons)
                    }
                    else {
                        if (json.error == undefined && json != null && json.stock_details != undefined) {
                            //sendReport(JSON.stringify(json, null, 3))
                            var name = json.name, price = inr(json.current_price), oPrice = inr(json.original_price), stockDetails = json.stock_details, genStock = stockDetails.general_stock, pinStock = stockDetails.pincode_stock, fassured = json.fassured, discount = json.discount, pincode = stockDetails.pincode
                            sendMessage(`<b>${name}</b>\n\n<b>💵 Current Price :</b> Rs. ${price}\n<b>💸 Original Price :</b> Rs. ${oPrice},\n<b>🔥 Discount :</b> ${discount}\n<b>👌 F-Assured :</b> ${fassured}\n<b>🚨 In-Stock (General) :</b> ${genStock}\n<b>🤩 In-Stock (${pincode}) :</b> ${pinStock}`, data)
                            setPincodeTrack(chatid, json.current_price, pincodeLink, pinStock, name, userPincode)
                        } else {
                            sendReport(JSON.stringify(json))
                            var keyboardButtons = [
                                { "text": "🔄 Try again", "callback_data": `set_pincode_track${userPincode}` },
                                { "text": "🧑🏻‍💻 Report issue", "callback_data": `/r` },
                                { "text": "ℹ️ Open in Flipkart", "url": pincodeLink },
                                { "text": "👌 Set normal tracking", "callback_data": "track_message" }
                            ]
                            sendButtonMessage('Some error occured from server side, please try again. If issue persits, then we do not support the product you sent, kindly report an issue to get it rectified and use the normal tracking instead.', data, null, keyboardButtons)
                        }
                    }
                }
            } catch (e) {
                sendReport(`Pincode API error\n${Error(e).message}\n\nCommand : <code>/${command} ${text}</code>\n\n<code>${JSON.stringify(data)}</code>`)
                sendMessage('Please validate your link or pincode', data)
            }
            break;
        case 't':
        case 'track':
            var json = api(link)
            var url = json.share_url
            add(chatid, json.current_price, url, String(json.in_stock), json.name)
            break;
        case 'stop':
            remove(chatid, text, false)
            break;
        case 'search':
        case 's':
            var keyboardButtons = [
                { "text": 'Flipkart', "callback_data": `/fk ${text}` },
                { "text": 'Amazon', "callback_data": `/am ${text}` }
            ]
            sendButtonMessage(`Search <code>${text}</code> on which platform?`, data, null, keyboardButtons)
            // search(text, data, 'compact')
            break;
        case 'fk':
            search(text, data, 'compact', 'Flipkart')
            break;
        case 'am':
            search(text, data, 'compact', 'Amazon')
            break;
        case 'ams':
            search(text, data, 'split', 'Amazon')
            break;
        case 'fks':
            search(text, data, 'split', 'Flipkart')
            break;
        case 'find':
            search(text, data, 'split')
            break;
        case 'show':
            show(text, data)
            break;
        case 'r':
            sendReport('Issue reported by ' + data.message.from.first_name + ' (<code>' + data.message.chat.id + '</code>) :\n' + text)
            sendMessage('Report sent!', data)
            break;
        case 'spec':
        case 'specs':
            if (text.split('@').length > 1) {
                var x = sendMessage('Executing Search & Reading Specs....', data)
                const sApi = 'https://flipkart.dvishal485.workers.dev/search/'
                var specs = text.split('@')[0]
                var nspecs = specs.split(' ')
                var specs = ''
                for (var l = 0; l < nspecs.length; l++) {
                    if (nspecs[l] != '') {
                        if (specs == '') {
                            specs = nspecs[l]
                        } else {
                            specs += '&' + nspecs[l]
                        }
                    }
                }

                var keyword = text.split('@')[1]
                if (keyword.split(' ')[0] == '') { keyword = text.split('@')[1] }
                var searchLink = sApi + keyword
                var success = false
                var searchList = JSON.parse(String(UrlFetchApp.fetch(searchLink))).result
                var key = searchList.length
                if (key > 3) { key = 3 }
                if (specs == '') {
                    specs = '&'
                    sendMessage('Get more precise result by searching some certain spec!', data)
                    key = 1
                }
                for (var k = 0; k < key; k++) {
                    var link = null
                    link = searchList[k].link
                    if (link != null) {
                        var tr = spec(link, specs, data, true)
                        if (tr) { success = true }
                    }
                }
                if (!success) { sendMessage('🤔 Couldn\'t find any matching specs!', data) }
                deleteMessage(x)

            } else {
                var keywords = text.split(' ')
                if (text.split('http').length > 1) {
                    var link = 'http' + text.split('http')[1].split(' ')[0]
                } else if (text.split('.com/').length > 1) {
                    var link = 'https://www.flipkart.com/' + text.split('.com/')[1].split(' ')[0]
                } else {
                    var link = String(keywords[keywords.length - 1])
                }
                if (link.length == 6) {
                    link = show(link, null)
                }
                if (keywords.length > 1) {
                    var specs = text.split(' ' + link)[0]
                    specs = specs.replace(/ /g, '&')
                } else {
                    specs = '&'
                }
                try {
                    spec(link, specs, data)
                }
                catch (e) {
                    sendMessage('🤔 There was some error while searching given specs!\n\n🚨 You are expected to search for specs as follows :\n\nMethod One : <code>/spec processor display @ poco m3</code>\n\nMethod Two : <code>/spec https://www.flipkart.com/poco-m3-cool-blue-64-gb/p/itmc8ec867cb0472</code>\n\nMethod Three : <code>/spec battery display https://www.flipkart.com/poco-m3-cool-blue-64-gb/p/itmc8ec867cb0472</code>\n\nTo know more send /spec', data)
                }
            }
            break;
        case 'send':
            if (data.message.from.id == ownerid || isOwnerCallback) {
                var to = text.split(' ')[0]
                if (to == 'updateNotice') {
                    updateNotice()
                } else {
                    var msg = text.replace(to + ' ', '')
                    var keyboardButtons = [
                        { "text": "🧑🏻‍💻 Reply to Developer", "callback_data": `/r` }
                    ]
                    var newData = sendButtonMessage(msg, null, to, keyboardButtons)
                    var keyboardButtons = [
                        { "text": "🗑 Delete Message", "callback_data": `/delete ${newData.result.message_id} ${newData.result.chat.id}` },
                        { "text": "✅ Preview", "callback_data": `send_report` }
                    ]

                    if (!(isOwnerCallback && to == String(ownerid))) {
                        sendButtonMessage(JSON.stringify(newData), null, data.message.chat.id, keyboardButtons)
                    }
                }
            }
            break;
    }
}
