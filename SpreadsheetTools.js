function add(chatid, price, url, stock, name) {
    if (url.lastIndexOf('amazon.in') != -1) {
        var client = 'Amazon'
    } else if (url.lastIndexOf('flipkart.com') != -1) {
        var client = 'Flipkart'
    } else {
        var client = 'Flipkart'
    }
    var ssNew = SpreadsheetApp.openById(sheetID)
    var sheet = ssNew.getSheets()[0]
    var products = ssNew.getSheets()[0].getDataRange().getValues().length
    var after = Math.ceil(products / batchSize) * trackAfter
    var id = generateString(6)
    var t = new Date();
    // CHANGE HERE IF REQUIRED MANNUALLY
    if (String(stock) == 'undefined') {
        sendMessage('üö® The product link configuration maybe wrong or the bot doesn\'t support this link yet. Issue will be reported to developer.\n\nThe problem may be fixed manually and if the problem persists, you will be contacted for assistance.\n\nYour unique Tracking ID is <code>' + id + '</code>\n\nGenerated by ' + botName, null, chatid)
        sendReport(`Error while adding product to spreadsheet!\n\nChat ID : <code>${chatid}</code>\n\nURL : ${url}\nStock Status : <code>${stock}</code>\nPrice : <code>Rs. ${inr(price)}</code>\nTrack ID : <code>${id}</code>`)
    } else {
        sheet.appendRow([chatid, price, id, url, t.toString(), stock, name]);
        SpreadsheetApp.flush()
        var keyboardButtons = [
            { "text": "‚û°Ô∏è Show Product", "callback_data": `get_message` },
            { "text": "‚ö†Ô∏è Stop Tracking", "callback_data": `/stop ${id}` },
            { "text": `‚ÑπÔ∏è Open in ${client}`, "url": url },
            { "text": "üëå Show all trackings", "callback_data": `/info ${chatid}` }
        ]

        sendButtonMessage('‚ÑπÔ∏è Added <a href="' + url +
            '">your product</a> to monitor!\n\n\nStock Status : <code>' + stock + '</code>\nPrice : <code>Rs. ' + inr(price) + '</code>\n\nYour unique Tracking ID is <code>' +
            id + `</code>\nMarketplace : <code>${client}</code>\n\nYour products will be tracked every ` + after + ' minutes!\nGenerated by ' + botName, null, chatid, keyboardButtons)

        if (String(chatid) != String(ownerid)) {
            sendButtonMessage(`New product added by Chat ID <a href="tg://user?id=${chatid}">${chatid}</a> (<code>${chatid}</code>)\n\nProduct Name : ${name}\nTracking ID : <code>${id}</code>\nPrice & Stock : <code>Rs. ${inr(price)}</code> (<code>${stock}</code>)\n\nMarketplace : <code>${client}</code>`, null, ownerid, keyboardButtons)
        }
    }
    subscribe(chatid)
}

function setPincodeTrack(chatid, price, url, instock, name, pincode) {
    var ssNew = SpreadsheetApp.openById(sheetID)
    var sheet = ssNew.getSheets()[2]
    var rules = sheet.getDataRange().getValues()
    Logger.log(rules)
    var products = rules.length
    var after = Math.ceil(products / pincodeBatchSize) * pincodeTrackAfter
    var trackId = generateString(7)
    var t = new Date();
    var isPatreon = false
    for (var i = 0; i < patreon.length; i++) {
        if (chatid == String(patreon[i])) {
            isPatreon = true
            break;
        }
    }
    var x = 0;

    if (!isPatreon) {
        for (var i = 0; i < products; i++) {
            if (chatid == rules[i][0]) { x++ }
        }
    }

    if (x > 2) {
        var keyboardButtons = [
            { "text": "‚û°Ô∏è Normal Tracking", "callback_data": `track_message` },
            { "text": "‚ÑπÔ∏è Become patreon", "callback_data": `/donate` },
            { "text": 'üëå Open in Flipkart', "url": url }
        ]
        sendButtonMessage('‚û°Ô∏è Pincode tracking is a premium feature and requires <i>more CPU and RAM usage</i> to keep tracking! So the feature is limited to <b>patreon-only</b> and <b>free users can only set upto 2 products</b> to track via pincode mode!\n\nüëå Consider setting up normal tracking or join the patreon by considering donation as per your potential.', null, chatid, keyboardButtons)
        sendReport(`Restricted <a href="tg://user?id=${chatid}">${chatid}</a> (<code>${chatid}</code>) from setting up pincode tracking!\n\n${url}\nIn-Stock : ${instock}`)
    } else {
        sheet.appendRow([chatid, price, trackId, url, t.toString(), instock, name, pincode]);
        SpreadsheetApp.flush()

        var keyboardButtons = [
            { "text": "‚û°Ô∏è Show Product", "callback_data": `get_message` },
            { "text": "‚ö†Ô∏è Stop Tracking", "callback_data": `/stop ${trackId}` },
            { "text": 'üëå Open in Flipkart', "url": url },
            { "text": "‚ÑπÔ∏è Show all trackings", "callback_data": `/info ${chatid}` }
        ]
        sendButtonMessage(`‚ÑπÔ∏è Added <a href="${url}">your product</a> to monitor (Pincode Mode)!\n\nRegistered Pincode : ${pincode}\n\nIn-Stock : <code>` + (instock ? 'Yes' : 'Unavaliable') + '</code>\nPrice : <code>Rs. ' + inr(price) + '</code>\n\nYour unique Tracking ID is <code>' +
            trackId + '</code>\n\nYour products will be tracked every ' + after + ' minutes!\nGenerated by ' + botName, null, chatid, keyboardButtons)

        if (String(chatid) != String(ownerid)) {
            sendButtonMessage(`‚ÑπÔ∏è New product added through pincode mode by Chat ID <a href="tg://user?id=${chatid}">${chatid}</a> (<code>${chatid}</code>)\n\nProduct Name : ${name}\nTracking ID : <code>${trackId}</code>\nPrice & Stock : <code>Rs. ${inr(price)}</code> (<code>${instock ? 'In-stock' : 'Unavaliable'}</code>)`, null, ownerid, keyboardButtons)
        }
    }
    subscribe(chatid)
}

function show(trackId, data) {
    if (trackId.length == 6) { var sheetNumber = 0 } else { var sheetNumber = 2 }
    var ssNew = SpreadsheetApp.openById(sheetID)
    var sheet = ssNew.getSheets()[sheetNumber]
    var dun = false
    var range = sheet.getDataRange()
    var rules = range.getValues()
    for (var i = 0; i < rules.length; i++) {
        var id = rules[i][ssVars[2]]
        var link = rules[i][ssVars[3]]
        if (trackId == id) {
            if (data != null) { perform('get', link, data) } else { return link }
            dun = true
            break;
        }
    }

    if (data != null) { if (!dun) { sendMessage('Couldn\'t find any tracking with Track ID <code>' + trackId + '</code>\n\nIt\s probably deleted', data) } }
}

function remove(chatid, trackId, silent) {
    if (trackId.length == 6) { var sheetNumber = 0 } else { var sheetNumber = 2 }
    var ssNew = SpreadsheetApp.openById(sheetID)
    var ivalue = null
    var sheet = ssNew.getSheets()[sheetNumber]
    var range = sheet.getDataRange()
    var rules = range.getValues()
    for (var i = 0; i < rules.length; i++) {
        var id = rules[i][ssVars[2]]
        var chat = rules[i][ssVars[0]]
        var name = rules[i][ssVars[6]]
        var link = rules[i][ssVars[3]]

        if (trackId == id) {
            ivalue = i + 1
            break;
        }
    }
    if (ivalue != null && (chat == chatid || chatid == ownerid)) {
        sheet.deleteRow(ivalue)
        if (!silent) {
            sendMessage(`Product tracking disabled for <a href="${link}">${name}</a>\n\nTrack ID : <code>${trackId}</code>`, null, chat)
            if (chatid == ownerid && chat != ownerid) {
                var keyboardButtons = [
                    { "text": "üßëüèª‚Äçüíª Contact Developer", "callback_data": `/r` },
                    { "text": "üî• Show active trackings", "callback_data": `/info ${chatid}` }
                ]
                sendButtonMessage(`Reason : Doesn't fall under the following instructions :\n\n1. There should be <b>no multiple trackings</b> for same product.\n2. The <b>free service</b> should not be <b>misused</b>.\n3. Product added is not supported to be tracked by bot yet.\n\n* The product may also be asked for manual deletion, in such case ignore the message.\n* You will be notified prior to deletion of any trackings.\n* In case you feel any error, contact the developer directly.`, null, chat, keyboardButtons)
            }
        }
    } else if (ivalue != null) {
        sendMessage('Sorry, unable to disable your Product Tracking. Please send the cancellation message from the chat where it was created.', null, chatid)
    } else {
        sendMessage('Track ID not found! Product may already be deleted', null, chatid)
    }
}

function subscribe(chatid) {
    try {
        var ssNew = SpreadsheetApp.openById(sheetID)
        var s = ssNew.getSheets()[1].getDataRange().getValues()
        var s = String(s[1][2])
        var subscribers = s.split(';')
        var susbs = false
        for (var i = 0; i < subscribers.length; i++) {
            if (subscribers[i] == chatid) {
                susbs = true
                break;
            }
        }
        if (!susbs) {
            var newSubs = s + chatid + ';'
            ssNew.getSheets()[1].getRange(2, 3).setValue(newSubs)
            SpreadsheetApp.flush()
            Logger.log(`Subscribed : ${chatid}`)
        } else { Logger.log(`Already Subscribed : ${chatid}`) }
    } catch (e) {
        sendReport(`Error while subscribing ${Error(e).message}`)
        Logger.log(`Error while subscribing : ${chatid}`)
    }
}

function removeUser(chatId) {
    //sendReport(`Trying to remove user ${chatId}`)
    var chatID = String(chatId)
    unsubscribe(chatID)
    var ssNew = SpreadsheetApp.openById(sheetID)
    var sheet = ssNew.getSheets()[0]
    var range = sheet.getDataRange()
    var rules = range.getValues()
    var fromValue = 1
    var toValue = rules.length
    for (i = fromValue; i < toValue; i++) {
        var chatid = String(rules[i][0])
        if (chatID == chatid) {
            var trackId = rules[i][ssVars[2]]
            remove(chatID, trackId, true)
        }
    }
}

function unsubscribe(chatid) {
    try {
        var ssNew = SpreadsheetApp.openById(sheetID)
        var s = ssNew.getSheets()[1].getDataRange().getValues()
        var s = String(s[1][2])
        var subscribers = s.split(';')
        var susbs = false
        for (var i = 0; i < subscribers.length; i++) {
            if (subscribers[i] == chatid) {
                susbs = true
                break;
            }
        }
        if (susbs) {
            var newSubs = s.replace(chatid + ';', '')
            ssNew.getSheets()[1].getRange(2, 3).setValue(newSubs)
            SpreadsheetApp.flush()
            sendReport(`Unsubscribed <a href="tg://user?id=${chatid}">${chatid}</a>`)
            Logger.log(`Unsubscribed ${chatid}`)
        }
    } catch (e) {
        Logger.log(`Error while unsubscribing <a href="tg://user?id=${chatid}">${chatid}</a>`)
        sendReport(`Error while unsubscribing ${Error(e).message}`)
    }
}

function clearClutter() {
    sendReport(`Regular maintainaince running...`)
    updateNotice(false, 'clear clutter', 'Clearing all false trackings...')
}
